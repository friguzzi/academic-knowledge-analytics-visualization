// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

//Make sure to run CreateDatabase script from common scripts first!
USE DATABASE AcdemicGraph;


DECLARE @conferenceShortName string = "MAS";  //Conference abbreviated name 

//*******************Constant Variable Section*****************************
//        Defining const variables to be used by other parts of the script
//*************************************************************************
//This output path pattern is hardcoded to the pbi file. If this is changed, the pbi file needs to be modified as well
DECLARE @conferenceAnalyticsBaseDir string = @"/output/conferenceAnalytics/";
DECLARE @outputBaseDir string = @conferenceAnalyticsBaseDir + "KRR2" + "/";

//*************************Ouptut Section**********************************
//                 All output files for this script.
//*************************************************************************
DECLARE @venueOutPath string =  @outputBaseDir + "venue.tsv";
DECLARE @conferenceIncomingCitationsByVenueOutPath string = @outputBaseDir + "conferenceIncomingCitationsByVenue.tsv";
DECLARE @conferenceYearlyIncomingCitationsByVenueOutPath string = @outputBaseDir + "conferenceYearlyIncomingCitationsByVenue.tsv";




//Get all [Paper] -> [FieldOfStudy] 
@paperAuthorAffiliationFieldsOfStudy =
    SELECT PaperFieldsOfStudy.FieldOfStudyId,
           PaperFieldsOfStudy.PaperId,
           Papers.Year
    FROM Papers
         INNER JOIN
             PaperFieldsOfStudy
         ON Papers.PaperId == PaperFieldsOfStudy.PaperId 
         INNER JOIN
             FieldsOfStudy
         ON FieldsOfStudy.FieldOfStudyId == PaperFieldsOfStudy.FieldOfStudyId
    WHERE (FieldsOfStudy.Level==2);

//The visualization can join against this table to get venue information. Since this isn't a large set of data, we can directly output it
//Venue is either a conference series or journal in Microsoft Academic Graph
//@venues =
//    SELECT FieldsOfStudy.FieldOfStudyId AS VenueId,
//           FieldsOfStudy.NormalizedName AS VenueShortName,
//           FieldsOfStudy.DisplayName AS VenueName
//    FROM FieldsOfStudy;


//OUTPUT @venues
//TO @venueOutPath
//USING Outputters.Tsv(outputHeader : true);


//First find the conference series id by matching conference short name.
DECLARE @targetConferenceSeriesId long =  161301231;
//@targetConferenceSeriesId =
//    SELECT (long?) ConferenceSeriesId AS ConferenceSeriesId //Cast long to long? to join against Paper table
//    FROM ConferenceSeries
//    WHERE NormalizedName == @conferenceShortName;


//Get all conference papers by conference series Id.
@conferencePapers =
    SELECT @paperAuthorAffiliationFieldsOfStudy.PaperId,
           @paperAuthorAffiliationFieldsOfStudy.Year,
           @paperAuthorAffiliationFieldsOfStudy.FieldOfStudyId AS VenueId
    FROM @paperAuthorAffiliationFieldsOfStudy WHERE FieldOfStudyId == @targetConferenceSeriesId;

//Get relationships between [citing paper] -> [conference paper]
@conferencePaperCitations =
    SELECT @conferencePapers.PaperId,
           @conferencePapers.Year,
           @conferencePapers.VenueId,
           @paperAuthorAffiliationFieldsOfStudy.PaperId AS CitationId,
           //A single paper may be published in conference and in a journal later.
           //Use conference as its venue if present otherwise, journal
           @paperAuthorAffiliationFieldsOfStudy.FieldOfStudyId AS CitationVenueId 
    FROM @paperAuthorAffiliationFieldsOfStudy
         INNER JOIN
             PaperReferences
         ON @paperAuthorAffiliationFieldsOfStudy.PaperId == PaperReferences.PaperId
         INNER JOIN
             @conferencePapers
         ON PaperReferences.PaperReferenceId == @conferencePapers.PaperId;


//Count the number of citations between citing conference and conference
//Keep VenueId and CitationVenueId such that the visulization can join directly with Venue table to get venue names
@conferencePaperCitationsByVenue =
    SELECT @conferencePaperCitations.VenueId,
           @conferencePaperCitations.CitationVenueId,
           COUNT( * ) AS CitationCount
    FROM @conferencePaperCitations
    GROUP BY @conferencePaperCitations.VenueId,
             @conferencePaperCitations.CitationVenueId;

OUTPUT @conferencePaperCitationsByVenue
TO @conferenceIncomingCitationsByVenueOutPath
USING Outputters.Tsv(outputHeader : true);


//For each yeah of conference, count the number of citations between citing conference and conference
//Keep VenueId and CitationVenueId such that the visulization can join directly with Venue table to get venue names
@conferencePaperCitationsByYearCitationVenue =
    SELECT @conferencePaperCitations.CitationVenueId,
           @conferencePaperCitations.Year,
           COUNT( * ) AS CitationCount
    FROM @conferencePaperCitations
    GROUP BY @conferencePaperCitations.CitationVenueId,
             @conferencePaperCitations.Year;


OUTPUT @conferencePaperCitationsByYearCitationVenue
TO @conferenceYearlyIncomingCitationsByVenueOutPath
USING Outputters.Tsv(outputHeader : true);



